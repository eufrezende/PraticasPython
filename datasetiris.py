# -*- coding: utf-8 -*-
"""DatasetIris

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubm7DFDqd1Bu7oxNJUBfz3AMv221kgQZ

Utilizando a UCI machine learning repository e a biblioteca Scikit-Learn para cada um dos conjuntos de dados abaixo: ● wine (vinhos) ● breast cancer (câncer de mama) Faça (responda) as questões abaixo:
a) Carregue o conjuntos de dados
b) Quantas características (features) o conjunto de dados possui?
c) Quantas classes o conjuntos de dados possui?
d) Normalize as características do conjunto de dados com MinMaxScaler.
e) Divida o conjunto de dados em treino e teste.
f) Qual a quantidade de exemplos do subconjunto de treinamento e teste?
"""

from sklearn.datasets import load_iris

# Carregando o conjunto de dados Iris
iris = load_iris()

# Verificando se o carregamento foi bem sucedido
if iris['data'].shape[0] == 150:
    print("Conjunto de dados Iris carregado com sucesso!")
else:
    print("Falha ao carregar o conjunto de dados Iris.")

# Verificando o número de características (features)
numero_caracteristicas = iris.data.shape[1]
print(f"O conjunto de dados Iris possui {numero_caracteristicas} características.")

# Verificando o número de classes
numero_classes = len(iris.target_names)
print(f"O conjunto de dados Iris possui {numero_classes} classes: {iris.target_names}")

from sklearn.preprocessing import MinMaxScaler

# Criando um objeto MinMaxScaler
scaler = MinMaxScaler()

# Normalizando as características (features)
dados_normalizados = scaler.fit_transform(iris.data)

from sklearn.model_selection import train_test_split

# Definindo a proporção para divisão (70% treino, 30% teste)
proporcao_treino = 0.7

# Dividindo os dados em treino e teste
X_treino, X_teste, y_treino, y_teste = train_test_split(dados_normalizados, iris.target, test_size=1 - proporcao_treino, random_state=42)

# Quantidade de exemplos no conjunto de treino
numero_exemplos_treino = X_treino.shape[0]
print(f"O conjunto de treino possui {numero_exemplos_treino} exemplos.")

# Quantidade de exemplos no conjunto de teste
numero_exemplos_teste = X_teste.shape[0]
print(f"O conjunto de teste possui {numero_exemplos_teste} exemplos.")